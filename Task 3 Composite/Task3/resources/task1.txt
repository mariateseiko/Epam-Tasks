Creating a good input/output (I/O) system is one of the more difficult for a language designer. This is evidenced by the number of different approaches. The challenge to be in covering all possibilities. Not only are different sources and of I/O that you want to communicate with (, the console, network connections, etc), but you need to talk to them in a wide variety of ways. The Java library designers attacked this problem by creating lots of classes. was also a significant change in the I/O library after Java i.o, when the original byte-oriented library was supplemented with char-oriented, Unicode- I/O classes. The problem is that without the historical perspective, you will rapidly become confused with some of the classes and when you should use them. This chapter will give you an introduction to the variety of I/O classes in the standard Java library and how to use them. Before getting into the classes that actually read and data to streams, look at a library utility that assists you with file directory issues. The File has a deceiving name; you it refers to a file, but it does not. In fact, "FilePath" have been a better name for the . It can represent either the name of a particular file or the of a set of in a directory. If it is a set of , you can ask for that set using the list( ) method, returns an array of String. It to return an array rather than one of the flexible container classes, because the number of elements is , and if you want a different directory listing, you just create a different File object. This section an example of the use of this , including the associated FilenameFilter interface. //: io/DirList.java // Display a directory listing using regular expressions. // {Args: "D.*\.java"} import java.util.regex.*; import java.io.*; import java.util.*; public class DirList { public static void main(String[] args) { File path = new File("."); String[] list; if(args.length == 0) list = path.list(); else list = path.list(new DirFilter(args[0])); Arrays.sort(list, String.CASE_INSENSITIVE_ORDER); for(String dirItem : list) System.out.println(dirItem); } } class DirFilter implements FilenameFilter { private Pattern pattern; public DirFilter(String regex) { pattern = Pattern.compile(regex); } public boolean accept(File dir, String name) { return pattern.matcher(name).matches(); } } /* Output: DirectoryDemo.java DirList.java DirList2.java DirList3.java *///:~     The DirFilter class implements the interface FilenameFilter. Notice how simple the FilenameFilter interface is: public interface FilenameFilter { boolean accept(File dir, String name); }     DirFilter’s sole reason for existence is to provide the accept( ) method to the list( ) method so that list( ) can "call back" accept( ) to determine which file names should be included in the list. Thus, this structure is often referred to as a callback. More specifically, this is an example of the Strategy design pattern, because list( ) implements basic functionality, and you provide the Strategy in the form of a FilenameFilter in order to complete the algorithm necessary for list( ) to provide its service. Because list( ) takes a FilenameFilter object as its argument, it means that you can pass an object of any class that implements FilenameFilter to choose (even at run time) how the list( ) method will behave. The purpose of a Strategy is to provide flexibility in the behavior of code.     The accept( ) method must accept a File object representing the directory that a particular file is found in, and a String containing the name of that file. Remember that the list( ) method is calling accept( ) for each of the file names in the directory object to see which one should be included; this is indicated by the boolean result returned by accept( ).     The accept( ) method uses a regular expression matcher object to see if the regular expression regex matches the name of the file. Using accept( ), the list( ) method returns an array.     This example is ideal for rewriting using an anonymous inner class (described in Inner Classes). As a first cut, a method filter( ) is created that returns a reference to a FilenameFilter: //: io/DirList2.java // Uses anonymous inner classes. // {Args: "D.*\.java"} import java.util.regex.*; import java.io.*; import java.util.*; public class DirList2 { public static FilenameFilter filter(final String regex) { // Creation of anonymous inner class: return new FilenameFilter() { private Pattern pattern = Pattern.compile(regex); public boolean accept(File dir, String name) { return pattern.matcher(name).matches(); } }; // End of anonymous inner class } public static void main(String[] args) { File path = new File("."); String[] list; if(args.length == 0) list = path.list(); else list = path.list(filter(args[0])); Arrays.sort(list, String.CASE_INSENSITIVE_ORDER); for(String dirItem : list) System.out.println(dirItem); } } /* Output: DirectoryDemo.java DirList.java DirList2.java DirList3.java *///:~     Note that the argument to filter( ) must be final. This is required by the anonymous inner class so that it can use an object from outside its scope. This design is an improvement because the FilenameFilter class is now tightly bound to DirList2. However, you can take this approach one step further and define the anonymous inner class as an argument to list(), in which case it’s even smaller: //: io/DirList3.java // Building the anonymous inner class "in-place." // {Args: "D.*\.java"} import java.util.regex.*; import java.io.*; import java.util.*; public class DirList3 { public static void main(final String[] args) { File path = new File("."); String[] list; if(args.length == 0) list = path.list(); else I/O 649 list = path.list(new FilenameFilter() { private Pattern pattern = Pattern.compile(args[0]); public boolean accept(File dir, String name) { return pattern.matcher(name).matches(); } }); Arrays.sort(list, String.CASE_INSENSITIVE_ORDER); for(String dirItem : list) System.out.println(dirItem); } } /* Output: DirectoryDemo.java DirList.java DirList2.java DirList3.java *///:~The argument to main( ) is now , the anonymous inner uses args[0] directly. This you how anonymous inner classes allow the creation of specific, one-off classes to problems. One benefit of this approach is that it the code that solves a particular problem isolated in one spot. On the other hand, it is not always as easy to read, so you must use it judiciously. Exercise 1: (3) Modify DirList.java (or one of its variants) so that the FilenameFilter opens and each file (using the net.mindview.util.TextFile utility) and accepts the file on whether any of the trailing arguments on the command line exist in that file. Exercise 2: (2) Create a called SortedDirList with a constructor that a File object and builds a sorted directory list from the at that File. Add to this two overloaded list( ) methods: the produces the list, and the second produces the subset of the list that matches its argument ( is a regular expression). Exercise 3: (3) Modify DirList.java (or one of its variants) so that it sums up the file of the selected . 